

fn main() {
    let mut user1 = User{
        email: String::from("1@11.com"),
        username:String::from("zt"),
        sign_in_count:1,
        active:false,
    };
    println!("{},{},{},{}",user1.email,user1.username,user1.sign_in_count,user1.active);

    user1.active = true;
    println!("{},{},{},{}",user1.email,user1.username,user1.sign_in_count,user1.active);

    user1 = build_user(user1.email, user1.username);
    println!("{},{},{},{}",user1.email,user1.username,user1.sign_in_count,user1.active);

    let user2 = User{
        username:String::from("newzt"),
        email:String::from("2@q.com"),
        ..user1
    };
    println!("{},{},{},{}",user2.email,user2.username,user2.sign_in_count,user2.active);

    
    struct Color(i32,i32,i32);
    struct Point(i32,i32, i32);
    let black = Color(0,0,0);
    let origin = Point(0,1,2);
    println!("{},{}",black.0,origin.2);




}

struct User {
    username: String, // 暂时先不考虑 &str 绕起来有点麻烦
    email: String,
    sign_in_count:usize,
    active:bool,
}
/// 创建一个用户
fn build_user(email:String,username:String)-> User {
    User { username, email, sign_in_count: 0, active: (false) }
}
